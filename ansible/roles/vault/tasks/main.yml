---
- name: "Creating vault user group '{{ vault_group }}'"
  ansible.builtin.group:
    name: "{{ vault_group }}"
  become: true

- name: "Creating vault user '{{ vault_user }}'"
  ansible.builtin.user:
    name: "{{ vault_user }}"
    group: "{{ vault_group }}"
    system: yes
    shell: /sbin/nologin
    comment: "vault nologin User"
    createhome: "no"
    state: present

- name: Install prerequisites
  package:
    name: "{{ item }}"
    update_cache: yes
  with_items: "{{ vault_install_prerequisites }}"
  become: yes

- name: Download binary
  ansible.builtin.get_url:
    url: "https://releases.hashicorp.com/vault/{{ vault_version }}/vault_{{ vault_version }}_linux_amd64.zip"
    dest: "{{ folder_tmp }}/vault_{{ vault_version }}_linux_amd64.zip"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: 0755
    checksum: "{{ vault_checksum }}"
  register: vault_download

- name: "Unzip vault archive"
  ansible.builtin.unarchive:
    src: "{{ vault_download.dest }}"
    dest: "{{ vault_binary_folder }}"
    copy: no
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: 0755

- name: Set vault capabilities
  community.general.capabilities:
    path: "{{ vault_binary_folder }}/{{ vault_binary }}"
    capability: cap_ipc_lock=ep
    state: present

- name: Create systemd service
  ansible.builtin.template:
    src: "{{ vault_service_template }}"
    dest: "{{ folder_systemd }}/{{ vault_service }}"
    owner: root
    group: root
  notify: systemd_reload

- name: Create vault settings folder
  ansible.builtin.file:
    path: "{{ vault_config_folder }}"
    state: directory
    owner: root
    group: root

- name: Create vault certs folder
  ansible.builtin.file:
    path: "{{ vault_config_folder }}/certs"
    state: directory
    owner: root
    group: root

- name: Create vault data folder
  ansible.builtin.file:
    path: "{{ vault_data_folder }}"
    state: directory
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"

- name: Copy config file
  ansible.builtin.template:
    src: "{{ vault_config_template }}"
    dest: "{{ vault_config_folder }}/{{ vault_config }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"

# https://docs.ansible.com/ansible/latest/collections/community/crypto/openssl_privatekey_module.html
- name: Generate an OpenSSL private key
  community.crypto.openssl_privatekey:
    path: "{{ vault_config_folder }}/certs/vault.key"
    size: "{{ vault_ssl_key_size }}"
    type: "{{ vault_ssl_key_type }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: '0440'

- name: Generate an OpenSSL Certificate Signing Request with Subject information
  community.crypto.openssl_csr:
    path: "{{ vault_config_folder }}/certs/vault.csr"
    privatekey_path: "{{ vault_config_folder }}/certs/vault.key"
    country_name: "{{ vault_ssl_cert_country_name }}"
    organization_name: "{{ vault_ssl_cert_organization_name }}"
    email_address: "{{ vault_ssl_cert_email_address }}"
    common_name: "{{ vault_ssl_cert_server_hostname }}"
    subject_alt_name: "IP:127.0.0.1,IP:{{ ansible_ens192.ipv4.address }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: '0440'

- name: Generate a Self Signed OpenSSL certificate
  community.crypto.x509_certificate:
    path: "{{ vault_config_folder }}/certs/vault.crt"
    privatekey_path: "{{ vault_config_folder }}/certs/vault.key"
    csr_path: "{{ vault_config_folder }}/certs/vault.csr"
    provider: selfsigned
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: '0440'

- name: Start and enable vault service
  ansible.builtin.systemd:
    name: vault
    state: started
    enabled: yes

- name: Permit TCP traffic on configured vault ports
  ansible.posix.firewalld:
    port: "{{ item }}/tcp"
    permanent: yes
    immediate: yes
    state: enabled
  with_items:
   - "{{ vault_port }}"