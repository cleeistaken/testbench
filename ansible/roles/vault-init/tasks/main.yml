- name: Create unseal directories
  ansible.builtin.file:
    path: "{{ unseal_keys_dir_output }}"
    state: directory
  delegate_to: localhost

- name: Create root key directories
  ansible.builtin.file:
    path: "{{ root_token_dir_output }}"
    state: directory
  delegate_to: localhost

- name: Get vault status
  ansible.builtin.shell: vault operator init -status
  environment:
    VAULT_ADDR: "http://127.0.0.1:8200"
  register: vault_init_status
  failed_when: vault_init_status.rc not in [ 0, 2 ]

- name: Reset Vault
  include_tasks: reset.yml
  when: vault_init_status.stdout == "Vault is initialized"

- name: Vault operator init
  ansible.builtin.shell: vault operator init -key-shares=5 -key-threshold=3 -format json
  environment:
    VAULT_ADDR: "http://127.0.0.1:8200"
  register: vault_init_results

- name: Parse output of vault init
  set_fact:
    vault_init_parsed: "{{ vault_init_results.stdout | from_json }}"

- name: Write unseal keys to files
  copy:
    dest: "{{ unseal_keys_dir_output }}/unseal_key_{{ item.0 }}"
    content: "{{ item.1 }}"
  with_indexed_items: "{{ vault_init_parsed.unseal_keys_hex }}"
  delegate_to: localhost

- name: Write root token to file
  copy:
    content: "{{ vault_init_parsed.root_token }}"
    dest: "{{ root_token_dir_output }}/rootkey"
  delegate_to: localhost

- name: Reading unseal key contents
  set_fact:
    unseal_keys: "{{ unseal_keys | default([]) + [lookup('file', item] }}"
  register: unseal_keys
  with_fileglob: "{{ unseal_keys_dir_output }}/*"
  delegate_to: localhost

- name: Foo
  debug:
    msg: "{{ item.stdout }}"
  with_items: "{{ unseal_keys.results }}"

- name: Unseal vault with unseal keys
  shell: |
    vault operator unseal {{ item.stdout }}
  environment:
    VAULT_ADDR: "http://127.0.0.1:8200"
  with_items: "{{ unseal_keys.results }}"